pipeline {
   agent {
       kubernetes {
      //cloud 'kubernetes'
      yaml """
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: docker-config
        mountPath: /kaniko/.docker
  - name: helm
    image: docker.io/alpine/helm:latest
    imagePullPolicy: IfNotPresent
    command:
    -  cat
    tty: true
  - name: nodejs
    image: docker.io/nodejscn/node:latest
    imagePullPolicy: IfNotPresent
    command:
    -  cat
    tty: true
  - name: awscli
    image: docker.io/mesosphere/aws-cli:latest
    imagePullPolicy: IfNotPresent
    command:
    -  cat
    tty: true
  volumes:
    - name: docker-config
      configMap:
        name: docker-config
"""
  }
   }
   stages {
      stage('Checkout') {
         steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/riqio/product-app-be.git']]])
           // sh 'echo checkout'
         }
      }
      stage('Compile') {
          steps {
              sh './gradlew build'
              //sh 'echo compile'
          }
      }
      stage ('Test') {
          steps {
              echo 'cmd to invoke test'
          }
      }
  stage('Build Docker Image & Publish') {
      steps {
        //git 'https://github.com/prabhatsharma/sample-microservice'
        container(name: 'kaniko') {
            sh '''
            /kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=641518622681.dkr.ecr.us-west-2.amazonaws.com/riq-product-app-be:latest --destination=641518622681.dkr.ecr.us-west-2.amazonaws.com/riq-product-app-be:$BUILD_NUMBER
            '''
            //sh 'echo create docker image'
        }
      }
    }
  stage('Deploy to k8s cluster') {
  steps{
    container(name: 'helm') {
     echo 'Updating Service'
     sh 'echo build no is $BUILD_NUMBER'
     sh '''pwd
      ls -l
      cd $WORKSPACE/deployment
      ls -l
      cd $WORKSPACE/deployment/helm/
      ls -l
     cd $WORKSPACE/deployment/helm/product-app-be
     ls -l
     sed -i "s/version: 0.1.0/version: 0.1.$BUILD_NUMBER/g" Chart.yaml
     cat Chart.yaml
     helm version
     helm upgrade --install --debug --force --namespace staging --set image.tag=$BUILD_NUMBER productappbe-staging .
     '''
     //sh 'helm upgrade --install --force productappbev1 .'
        }
      }
    }
     
   }
}
